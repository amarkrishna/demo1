/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-2-11")
public class MagpieServer {

  public interface Iface {

    /**
     *        * Compute the properties of each entry in a list
     *        * @param entries [in] List of entries to be evaluated
     *        * @param props [in] Names of properties to evaluate
     * * @return List of each property for each entry
     * 
     * @param entries
     * @param props
     */
    public List<List<Double>> evaluateProperties(List<entry> entries, List<String> props) throws MagpieServerException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void evaluateProperties(List<entry> entries, List<String> props, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<List<Double>> evaluateProperties(List<entry> entries, List<String> props) throws MagpieServerException, org.apache.thrift.TException
    {
      send_evaluateProperties(entries, props);
      return recv_evaluateProperties();
    }

    public void send_evaluateProperties(List<entry> entries, List<String> props) throws org.apache.thrift.TException
    {
      evaluateProperties_args args = new evaluateProperties_args();
      args.setEntries(entries);
      args.setProps(props);
      sendBase("evaluateProperties", args);
    }

    public List<List<Double>> recv_evaluateProperties() throws MagpieServerException, org.apache.thrift.TException
    {
      evaluateProperties_result result = new evaluateProperties_result();
      receiveBase(result, "evaluateProperties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evaluateProperties failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void evaluateProperties(List<entry> entries, List<String> props, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evaluateProperties_call method_call = new evaluateProperties_call(entries, props, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evaluateProperties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<entry> entries;
      private List<String> props;
      public evaluateProperties_call(List<entry> entries, List<String> props, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entries = entries;
        this.props = props;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evaluateProperties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evaluateProperties_args args = new evaluateProperties_args();
        args.setEntries(entries);
        args.setProps(props);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Double>> getResult() throws MagpieServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evaluateProperties();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("evaluateProperties", new evaluateProperties());
      return processMap;
    }

    public static class evaluateProperties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evaluateProperties_args> {
      public evaluateProperties() {
        super("evaluateProperties");
      }

      public evaluateProperties_args getEmptyArgsInstance() {
        return new evaluateProperties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public evaluateProperties_result getResult(I iface, evaluateProperties_args args) throws org.apache.thrift.TException {
        evaluateProperties_result result = new evaluateProperties_result();
        try {
          result.success = iface.evaluateProperties(args.entries, args.props);
        } catch (MagpieServerException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("evaluateProperties", new evaluateProperties());
      return processMap;
    }

    public static class evaluateProperties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, evaluateProperties_args, List<List<Double>>> {
      public evaluateProperties() {
        super("evaluateProperties");
      }

      public evaluateProperties_args getEmptyArgsInstance() {
        return new evaluateProperties_args();
      }

      public AsyncMethodCallback<List<List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Double>>>() { 
          public void onComplete(List<List<Double>> o) {
            evaluateProperties_result result = new evaluateProperties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            evaluateProperties_result result = new evaluateProperties_result();
            if (e instanceof MagpieServerException) {
                        result.ouch = (MagpieServerException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, evaluateProperties_args args, org.apache.thrift.async.AsyncMethodCallback<List<List<Double>>> resultHandler) throws TException {
        iface.evaluateProperties(args.entries, args.props,resultHandler);
      }
    }

  }

  public static class evaluateProperties_args implements org.apache.thrift.TBase<evaluateProperties_args, evaluateProperties_args._Fields>, java.io.Serializable, Cloneable, Comparable<evaluateProperties_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluateProperties_args");

    private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField PROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("props", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evaluateProperties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evaluateProperties_argsTupleSchemeFactory());
    }

    public List<entry> entries; // required
    public List<String> props; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTRIES((short)1, "entries"),
      PROPS((short)2, "props");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTRIES
            return ENTRIES;
          case 2: // PROPS
            return PROPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, entry.class))));
      tmpMap.put(_Fields.PROPS, new org.apache.thrift.meta_data.FieldMetaData("props", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluateProperties_args.class, metaDataMap);
    }

    public evaluateProperties_args() {
    }

    public evaluateProperties_args(
      List<entry> entries,
      List<String> props)
    {
      this();
      this.entries = entries;
      this.props = props;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluateProperties_args(evaluateProperties_args other) {
      if (other.isSetEntries()) {
        List<entry> __this__entries = new ArrayList<entry>(other.entries.size());
        for (entry other_element : other.entries) {
          __this__entries.add(new entry(other_element));
        }
        this.entries = __this__entries;
      }
      if (other.isSetProps()) {
        List<String> __this__props = new ArrayList<String>(other.props);
        this.props = __this__props;
      }
    }

    public evaluateProperties_args deepCopy() {
      return new evaluateProperties_args(this);
    }

    @Override
    public void clear() {
      this.entries = null;
      this.props = null;
    }

    public int getEntriesSize() {
      return (this.entries == null) ? 0 : this.entries.size();
    }

    public java.util.Iterator<entry> getEntriesIterator() {
      return (this.entries == null) ? null : this.entries.iterator();
    }

    public void addToEntries(entry elem) {
      if (this.entries == null) {
        this.entries = new ArrayList<entry>();
      }
      this.entries.add(elem);
    }

    public List<entry> getEntries() {
      return this.entries;
    }

    public evaluateProperties_args setEntries(List<entry> entries) {
      this.entries = entries;
      return this;
    }

    public void unsetEntries() {
      this.entries = null;
    }

    /** Returns true if field entries is set (has been assigned a value) and false otherwise */
    public boolean isSetEntries() {
      return this.entries != null;
    }

    public void setEntriesIsSet(boolean value) {
      if (!value) {
        this.entries = null;
      }
    }

    public int getPropsSize() {
      return (this.props == null) ? 0 : this.props.size();
    }

    public java.util.Iterator<String> getPropsIterator() {
      return (this.props == null) ? null : this.props.iterator();
    }

    public void addToProps(String elem) {
      if (this.props == null) {
        this.props = new ArrayList<String>();
      }
      this.props.add(elem);
    }

    public List<String> getProps() {
      return this.props;
    }

    public evaluateProperties_args setProps(List<String> props) {
      this.props = props;
      return this;
    }

    public void unsetProps() {
      this.props = null;
    }

    /** Returns true if field props is set (has been assigned a value) and false otherwise */
    public boolean isSetProps() {
      return this.props != null;
    }

    public void setPropsIsSet(boolean value) {
      if (!value) {
        this.props = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTRIES:
        if (value == null) {
          unsetEntries();
        } else {
          setEntries((List<entry>)value);
        }
        break;

      case PROPS:
        if (value == null) {
          unsetProps();
        } else {
          setProps((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTRIES:
        return getEntries();

      case PROPS:
        return getProps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTRIES:
        return isSetEntries();
      case PROPS:
        return isSetProps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evaluateProperties_args)
        return this.equals((evaluateProperties_args)that);
      return false;
    }

    public boolean equals(evaluateProperties_args that) {
      if (that == null)
        return false;

      boolean this_present_entries = true && this.isSetEntries();
      boolean that_present_entries = true && that.isSetEntries();
      if (this_present_entries || that_present_entries) {
        if (!(this_present_entries && that_present_entries))
          return false;
        if (!this.entries.equals(that.entries))
          return false;
      }

      boolean this_present_props = true && this.isSetProps();
      boolean that_present_props = true && that.isSetProps();
      if (this_present_props || that_present_props) {
        if (!(this_present_props && that_present_props))
          return false;
        if (!this.props.equals(that.props))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entries = true && (isSetEntries());
      list.add(present_entries);
      if (present_entries)
        list.add(entries);

      boolean present_props = true && (isSetProps());
      list.add(present_props);
      if (present_props)
        list.add(props);

      return list.hashCode();
    }

    @Override
    public int compareTo(evaluateProperties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntries()).compareTo(other.isSetEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, other.entries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProps()).compareTo(other.isSetProps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.props, other.props);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evaluateProperties_args(");
      boolean first = true;

      sb.append("entries:");
      if (this.entries == null) {
        sb.append("null");
      } else {
        sb.append(this.entries);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("props:");
      if (this.props == null) {
        sb.append("null");
      } else {
        sb.append(this.props);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluateProperties_argsStandardSchemeFactory implements SchemeFactory {
      public evaluateProperties_argsStandardScheme getScheme() {
        return new evaluateProperties_argsStandardScheme();
      }
    }

    private static class evaluateProperties_argsStandardScheme extends StandardScheme<evaluateProperties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTRIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                  struct.entries = new ArrayList<entry>(_list10.size);
                  entry _elem11;
                  for (int _i12 = 0; _i12 < _list10.size; ++_i12)
                  {
                    _elem11 = new entry();
                    _elem11.read(iprot);
                    struct.entries.add(_elem11);
                  }
                  iprot.readListEnd();
                }
                struct.setEntriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
                  struct.props = new ArrayList<String>(_list13.size);
                  String _elem14;
                  for (int _i15 = 0; _i15 < _list13.size; ++_i15)
                  {
                    _elem14 = iprot.readString();
                    struct.props.add(_elem14);
                  }
                  iprot.readListEnd();
                }
                struct.setPropsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entries != null) {
          oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entries.size()));
            for (entry _iter16 : struct.entries)
            {
              _iter16.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.props != null) {
          oprot.writeFieldBegin(PROPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.props.size()));
            for (String _iter17 : struct.props)
            {
              oprot.writeString(_iter17);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluateProperties_argsTupleSchemeFactory implements SchemeFactory {
      public evaluateProperties_argsTupleScheme getScheme() {
        return new evaluateProperties_argsTupleScheme();
      }
    }

    private static class evaluateProperties_argsTupleScheme extends TupleScheme<evaluateProperties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntries()) {
          optionals.set(0);
        }
        if (struct.isSetProps()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntries()) {
          {
            oprot.writeI32(struct.entries.size());
            for (entry _iter18 : struct.entries)
            {
              _iter18.write(oprot);
            }
          }
        }
        if (struct.isSetProps()) {
          {
            oprot.writeI32(struct.props.size());
            for (String _iter19 : struct.props)
            {
              oprot.writeString(_iter19);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.entries = new ArrayList<entry>(_list20.size);
            entry _elem21;
            for (int _i22 = 0; _i22 < _list20.size; ++_i22)
            {
              _elem21 = new entry();
              _elem21.read(iprot);
              struct.entries.add(_elem21);
            }
          }
          struct.setEntriesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.props = new ArrayList<String>(_list23.size);
            String _elem24;
            for (int _i25 = 0; _i25 < _list23.size; ++_i25)
            {
              _elem24 = iprot.readString();
              struct.props.add(_elem24);
            }
          }
          struct.setPropsIsSet(true);
        }
      }
    }

  }

  public static class evaluateProperties_result implements org.apache.thrift.TBase<evaluateProperties_result, evaluateProperties_result._Fields>, java.io.Serializable, Cloneable, Comparable<evaluateProperties_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluateProperties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evaluateProperties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evaluateProperties_resultTupleSchemeFactory());
    }

    public List<List<Double>> success; // required
    public MagpieServerException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluateProperties_result.class, metaDataMap);
    }

    public evaluateProperties_result() {
    }

    public evaluateProperties_result(
      List<List<Double>> success,
      MagpieServerException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluateProperties_result(evaluateProperties_result other) {
      if (other.isSetSuccess()) {
        List<List<Double>> __this__success = new ArrayList<List<Double>>(other.success.size());
        for (List<Double> other_element : other.success) {
          List<Double> __this__success_copy = new ArrayList<Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new MagpieServerException(other.ouch);
      }
    }

    public evaluateProperties_result deepCopy() {
      return new evaluateProperties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Double> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Double>>();
      }
      this.success.add(elem);
    }

    public List<List<Double>> getSuccess() {
      return this.success;
    }

    public evaluateProperties_result setSuccess(List<List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MagpieServerException getOuch() {
      return this.ouch;
    }

    public evaluateProperties_result setOuch(MagpieServerException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Double>>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((MagpieServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evaluateProperties_result)
        return this.equals((evaluateProperties_result)that);
      return false;
    }

    public boolean equals(evaluateProperties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(evaluateProperties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evaluateProperties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluateProperties_resultStandardSchemeFactory implements SchemeFactory {
      public evaluateProperties_resultStandardScheme getScheme() {
        return new evaluateProperties_resultStandardScheme();
      }
    }

    private static class evaluateProperties_resultStandardScheme extends StandardScheme<evaluateProperties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Double>>(_list26.size);
                  List<Double> _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    {
                      org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                      _elem27 = new ArrayList<Double>(_list29.size);
                      double _elem30;
                      for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                      {
                        _elem30 = iprot.readDouble();
                        _elem27.add(_elem30);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new MagpieServerException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Double> _iter32 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter32.size()));
                for (double _iter33 : _iter32)
                {
                  oprot.writeDouble(_iter33);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluateProperties_resultTupleSchemeFactory implements SchemeFactory {
      public evaluateProperties_resultTupleScheme getScheme() {
        return new evaluateProperties_resultTupleScheme();
      }
    }

    private static class evaluateProperties_resultTupleScheme extends TupleScheme<evaluateProperties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Double> _iter34 : struct.success)
            {
              {
                oprot.writeI32(_iter34.size());
                for (double _iter35 : _iter34)
                {
                  oprot.writeDouble(_iter35);
                }
              }
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Double>>(_list36.size);
            List<Double> _elem37;
            for (int _i38 = 0; _i38 < _list36.size; ++_i38)
            {
              {
                org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem37 = new ArrayList<Double>(_list39.size);
                double _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readDouble();
                  _elem37.add(_elem40);
                }
              }
              struct.success.add(_elem37);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new MagpieServerException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

}
